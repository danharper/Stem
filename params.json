{"name":"Stem","tagline":"A simple fixtures library for PHP","body":"# Stem\r\n\r\nA simple fixtures library for PHP. (This is mostly a practice for me to learn writing TDD with, but I think this would be useful)\r\n\r\n[![Build Status](https://travis-ci.org/danharper/Stem.png?branch=master)](https://travis-ci.org/danharper/Stem)\r\n\r\n## Installation\r\n\r\nGet it from Composer with `\"danharper\\stem\": \"dev-master\"`.\r\n\r\nThen you have two ways you can use it:\r\n\r\n```php\r\n<?php\r\nclass_alias('danharper\\Stem\\Facades\\Native\\Stem', 'Stem');\r\n\r\nStem::run('3:words');\r\n```\r\n\r\n```php\r\n<?php\r\nclass_alias('danharper\\Stem\\Stem', 'Stem');\r\n\r\n$stem = new Stem;\r\n$stem->run('3:words');\r\n```\r\n\r\n\r\n## Example\r\n\r\nDeclare what a fixture should look like:\r\n\r\n```php\r\n<?php\r\nStem::fixture('User', array(\r\n\t'id' => ':int'\r\n\t'name' => '2:words',\r\n\t'email' => ':email',\r\n\t'bio' => ':string',\r\n));\r\n```\r\n\r\nThen use it:\r\n\r\n```php\r\n<?php\r\n$fixture = Stem::attributes('User');\r\n\r\n// array(\r\n//   'id' => 29,\r\n//   'name' => 'foo banana',\r\n//   'email' => 'mascot28384@bread.example.com',\r\n//   'bio' => 'dawn chat grandpa ballplayer cell Jill wing brainstorm chill Jills hunk ache'\r\n// )\r\n```\r\n\r\nOr even create a real object directly from it:\r\n\r\n```php\r\n<?php\r\n$obj = Stem::make('User');\r\n\r\n// this calls:\r\n// new User(array( ... ))\r\n```\r\n\r\nIn simpler cases you may just need a couple of random words:\r\n\r\n```php\r\n<?php\r\nStem::run('3:words');\r\n```\r\n\r\n## Provided Handlers\r\n\r\n* `:string` and `:words` -- prefix with a number for that many words, eg. `3:words`\r\n* `:word` -- for a single word, for clarity in your code you could even write `1:word` (`1:words` would also work)\r\n* `:int` and `:number` -- prefix with a number for a number from 0 _up to_ the given number\r\n* `:email`\r\n\r\n## Registering your own Handlers\r\n\r\nWith a class:\r\nProvide `Stem::register()` with an object which when told `register` returns what it wishes to be known as, and when told `run` with an optional modifier returns something to display. Implent `danharper\\Stem\\Handlers\\HandlerInterface` for clarity.\r\n\r\n```php\r\n<?php\r\n\r\nclass CustomHandler {\r\n\tpublic function register() {\r\n\t\treturn 'custom';\r\n\t}\r\n\r\n\tpublic function run($modifier) {\r\n\t\tif ($modifier)\r\n\t\t\treturn \"something $modifier\";\r\n\t\telse\r\n\t\t\treturn \"something else\";\r\n\t}\r\n}\r\n\r\nStem::register(new CustomHandler);\r\n\r\nStem::run('lorem:custom'); // something lorem\r\nStem::run(':custom'); // something else\r\n```\r\n\r\nWith a closure:\r\nOr provide `Stem::register()` with a Closure behaving as the run method in the class above, and with the second argument what it wishes to be known as.\r\n\r\n```php\r\n<?php\r\n\r\nStem::register(function($modifier) {\r\n\tif ($modifier)\r\n\t\treturn \"something $modifier\";\r\n\telse\r\n\t\treturn \"something else\";\r\n}, 'foobar');\r\n\r\nStem::run('baz:foobar'); // something baz\r\nStem::run(':foobar'); // something else\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}